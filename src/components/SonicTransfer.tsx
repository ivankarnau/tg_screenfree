import React, { useRef, useState, useEffect, useCallback } from 'react';
import { useTelegram } from '../hooks/useTelegram';
import '../styles/Components/SonicTransfer.css';

declare global {
  interface Window {
    Quiet: {
      init: (options: { profilesPrefix: string; memoryInitializerPrefix: string }) => void;
      addReadyCallback: (success: () => void, error: (e: any) => void) => void;
      transmitter: (options: any) => any;
      receiver: (options: any) => any;
      str2ab: (str: string) => ArrayBuffer;
      ab2str: (buf: ArrayBuffer) => string;
    };
    webkitAudioContext: typeof AudioContext;
    isIOS: boolean;
    isTelegram: boolean;
  }
}

type Props = {
  tokenId: string | null;
  amount: number | null;
  onSuccess?: (receivedToken?: any) => void;
};

export function SonicTransfer({ tokenId, amount, onSuccess }: Props) {
  const { showPopup } = useTelegram();
  const [mode, setMode] = useState<'idle' | 'send' | 'receive' | 'done' | 'error'>('idle');
  const [status, setStatus] = useState('');
  const [volumeLevel, setVolumeLevel] = useState(0);
  const [isQuietReady, setIsQuietReady] = useState(false);
  
  const txRef = useRef<any>(null);
  const rxRef = useRef<any>(null);
  const audioContextRef = useRef<AudioContext | null>(null);
  const analyserRef = useRef<AnalyserNode | null>(null);
  const animationFrameRef = useRef<number>(0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ API
  const isAudioSupported = !!(window.AudioContext || window.webkitAudioContext);
  const isGetUserMediaSupported = !!(navigator.mediaDevices?.getUserMedia);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quiet.js —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  useEffect(() => {
    const checkQuietReady = () => {
      if (window.Quiet) {
        setIsQuietReady(true);
        return;
      }
      setTimeout(checkQuietReady, 100);
    };

    checkQuietReady();
  }, []);

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const activateAudioContext = useCallback(async () => {
    try {
      if (!audioContextRef.current) {
        const AudioContext = window.AudioContext || window.webkitAudioContext;
        audioContextRef.current = new AudioContext();
      }
      
      if (audioContextRef.current.state === 'suspended') {
        await audioContextRef.current.resume();
      }
      return true;
    } catch (e) {
      console.error("AudioContext activation failed:", e);
      return false;
    }
  }, []);

  // –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const transmitToken = useCallback(async () => {
    if (!isQuietReady || !window.Quiet) {
      showPopup({ title: '–û—à–∏–±–∫–∞', message: '–ê—É–¥–∏–æ –º–æ–¥—É–ª—å –Ω–µ –≥–æ—Ç–æ–≤' });
      return;
    }

    if (!tokenId || !amount) {
      showPopup({ title: '–û—à–∏–±–∫–∞', message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏' });
      return;
    }

    setMode('send');
    setStatus('–ò–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∞...');

    try {
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞—É–¥–∏–æ
      const audioActivated = await activateAudioContext();
      if (!audioActivated) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ");
      }

      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
      if (txRef.current) {
        txRef.current.destroy();
        txRef.current = null;
      }

      txRef.current = window.Quiet.transmitter({
        profile: 'ultrasonic', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        onFinish: () => {
          setMode('done');
          setStatus('–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          onSuccess?.();
        },
        onCreateFail: (err: any) => {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞: ${err}`);
        }
      });

      const payload = JSON.stringify({ 
        token_id: tokenId, 
        amount,
        timestamp: Date.now()
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 100));
      txRef.current.transmit(window.Quiet.str2ab(payload));

    } catch (error: any) {
      setMode('error');
      setStatus('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏');
      console.error("Transmission error:", error);
      showPopup({
        title: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏',
        message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω'
      });
      cleanup();
    }
  }, [isQuietReady, tokenId, amount, onSuccess, showPopup, activateAudioContext]);

  // –ü—Ä–∏–µ–º —Ç–æ–∫–µ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const receiveToken = useCallback(async () => {
    if (!isQuietReady) {
      showPopup({ title: '–û—à–∏–±–∫–∞', message: '–ê—É–¥–∏–æ –º–æ–¥—É–ª—å –Ω–µ –≥–æ—Ç–æ–≤' });
      return;
    }

    if (!isGetUserMediaSupported) {
      showPopup({ 
        title: '–û—à–∏–±–∫–∞', 
        message: window.isIOS 
          ? '–í–∫–ª—é—á–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram' 
          : '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω' 
      });
      return;
    }

    setMode('receive');
    setStatus('–û–∂–∏–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');

    try {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–∏–µ–º–Ω–∏–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
      if (rxRef.current) {
        rxRef.current.destroy();
        rxRef.current = null;
      }

      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: false,
          noiseSuppression: false,
          autoGainControl: false
        }
      });
      
      await activateAudioContext();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      const context = audioContextRef.current || new AudioContext();
      const source = context.createMediaStreamSource(stream);
      
      analyserRef.current = context.createAnalyser();
      analyserRef.current.fftSize = 32;
      source.connect(analyserRef.current);
      
      const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);
      
      const updateVolume = () => {
        if (!analyserRef.current) return;
        analyserRef.current.getByteFrequencyData(dataArray);
        const average = dataArray.reduce((sum, val) => sum + val, 0) / dataArray.length;
        setVolumeLevel(Math.min(average, 100));
        animationFrameRef.current = requestAnimationFrame(updateVolume);
      };
      
      updateVolume();

      rxRef.current = window.Quiet.receiver({
        profile: 'ultrasonic',
        onReceive: (buf: ArrayBuffer) => {
          try {
            const data = JSON.parse(window.Quiet.ab2str(buf));
            if (data.token_id && data.amount) {
              setMode('done');
              setStatus('–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!');
              onSuccess?.(data);
            }
          } catch (e) {
            console.error("Decoding error:", e);
          }
        },
        onCreateFail: (err: any) => {
          throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞: ${err}`);
        }
      });

    } catch (error: any) {
      setMode('error');
      setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞');
      console.error("Reception error:", error);
      showPopup({
        title: '–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞',
        message: window.isIOS
          ? '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Safari'
          : error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω'
      });
      cleanup();
    }
  }, [isQuietReady, onSuccess, showPopup, activateAudioContext]);

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const cleanup = useCallback(() => {
    cancelAnimationFrame(animationFrameRef.current);
    txRef.current?.destroy();
    rxRef.current?.destroy();
    
    if (audioContextRef.current?.state !== 'closed') {
      audioContextRef.current?.close().catch(e => console.error("Error closing audio context:", e));
      audioContextRef.current = null;
    }
  }, []);

  useEffect(() => {
    return () => cleanup();
  }, [cleanup]);

  if (!isAudioSupported) {
    return (
      <div className="sonic-error">
        <h3>–ê—É–¥–∏–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</h3>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome –∏–ª–∏ Firefox –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ</p>
      </div>
    );
  }

  if (!isQuietReady) {
    return (
      <div className="sonic-transfer loading">
        <div className="sonic-transfer-loader">
          <div className="sonic-wave"></div>
          <div className="sonic-wave"></div>
          <div className="sonic-wave"></div>
          <p>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –º–æ–¥—É–ª—è...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="sonic-transfer">
      <h2>–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞</h2>
      
      <div className="sonic-transfer-controls">
        {mode === 'idle' && (
          <>
            <button
              className="sonic-button primary"
              onClick={transmitToken}
              disabled={!tokenId}
            >
              üì§ –ü–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω
            </button>
            <button
              className="sonic-button secondary"
              onClick={receiveToken}
              disabled={!isGetUserMediaSupported}
            >
              üì• –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
            </button>
          </>
        )}

        {(mode === 'send' || mode === 'receive') && (
          <div className="sonic-transfer-active">
            <div className="sonic-status">{status}</div>
            
            {mode === 'receive' && (
              <div className="sonic-volume">
                <div 
                  className="sonic-volume-level" 
                  style={{ width: `${volumeLevel}%` }}
                />
              </div>
            )}

            <button
              className="sonic-button cancel"
              onClick={cleanup}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        )}

        {mode === 'done' && (
          <div className="sonic-transfer-result">
            <div className="sonic-status success">{status}</div>
            <button
              className="sonic-button"
              onClick={cleanup}
            >
              –ì–æ—Ç–æ–≤–æ
            </button>
          </div>
        )}

        {mode === 'error' && (
          <div className="sonic-transfer-error">
            <div className="sonic-status error">{status}</div>
            <button
              className="sonic-button"
              onClick={cleanup}
            >
              –ü–æ–Ω—è—Ç–Ω–æ
            </button>
          </div>
        )}
      </div>

      {window.isIOS && (
        <div className="sonic-ios-hint">
          ‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
          <br />1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
          <br />2. –í—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –≤ Safari"
          <br />3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
        </div>
      )}
    </div>
  );
}