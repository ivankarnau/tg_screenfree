import React, { useRef, useState, useEffect } from 'react';
import { useTelegram } from '../hooks/useTelegram';
import '../styles/Components/SonicTransfer.css';

const PROFILE_NAME = 'ultrasonic-transfer';

type Props = {
  tokenId: string | null;
  amount: number | null;
  onSuccess?: (payload?: any) => void;
};

export function SonicTransfer({ tokenId, amount, onSuccess }: Props) {
  const { webApp, isIos, showPopup } = useTelegram();
  const [isTransmitting, setTransmitting] = useState(false);
  const [status, setStatus] = useState('');
  const [isQuietReady, setIsQuietReady] = useState(false);
  const [volumeBars, setVolumeBars] = useState(0);
  const txRef = useRef<any>();
  const audioContextRef = useRef<AudioContext | null>(null);
  const volumeIntervalRef = useRef<NodeJS.Timeout>();

  useEffect(() => {
    const handleQuietReady = () => {
      setIsQuietReady(true);
      setStatus('–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞');
    };
    
    const handleQuietFailed = (e: any) => {
      setStatus(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    };

    window.addEventListener('quiet-ready', handleQuietReady);
    window.addEventListener('quiet-failed', handleQuietFailed);

    return () => {
      window.removeEventListener('quiet-ready', handleQuietReady);
      window.removeEventListener('quiet-failed', handleQuietFailed);
      if (volumeIntervalRef.current) clearInterval(volumeIntervalRef.current);
    };
  }, []);

  const initAudioContext = async () => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();
    }
    if (audioContextRef.current.state === 'suspended') {
      await audioContextRef.current.resume();
    }
    return audioContextRef.current;
  };

  const startVolumeAnimation = () => {
    volumeIntervalRef.current = setInterval(() => {
      setVolumeBars(Math.floor(Math.random() * 5) + 3);
    }, 100);
  };

  const stopVolumeAnimation = () => {
    if (volumeIntervalRef.current) {
      clearInterval(volumeIntervalRef.current);
      setVolumeBars(0);
    }
  };

  const handleSendToken = async () => {
    if (!tokenId || !amount) {
      showPopup({ title: '–û—à–∏–±–∫–∞', message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏' });
      return;
    }

    if (!isQuietReady) {
      showPopup({ title: '–û—à–∏–±–∫–∞', message: '–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞' });
      return;
    }

    try {
      setTransmitting(true);
      setStatus('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏...');
      startVolumeAnimation();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      await initAudioContext();

      // –î–ª—è iOS –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ–¥–∞—á–∏
      if (isIos) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      txRef.current = window.Quiet.transmitter({
        profile: PROFILE_NAME,
        onFinish: () => {
          setStatus('–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          setTransmitting(false);
          stopVolumeAnimation();
          onSuccess?.();
          if (txRef.current) {
            txRef.current.destroy();
          }
        },
        onCreateFail: (e: any) => {
          console.error('Transmitter error:', e);
          setStatus(`–û—à–∏–±–∫–∞: ${e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
          setTransmitting(false);
          stopVolumeAnimation();
        },
        onTransmitFail: () => {
          setStatus('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏');
          setTransmitting(false);
          stopVolumeAnimation();
        }
      });

      const payload = JSON.stringify({
        token_id: tokenId,
        amount: amount,
        ts: Date.now()
      });

      setStatus('–ò–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∞...');
      txRef.current.transmit(window.Quiet.str2ab(payload));
      
    } catch (error: any) {
      console.error('Transmission failed:', error);
      setStatus(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setTransmitting(false);
      stopVolumeAnimation();
      if (txRef.current) {
        txRef.current.destroy();
      }
    }
  };

  const handleOpenReceiver = () => {
    const RECEIVER_URL = '/receiver.html';
    
    if (webApp?.openLink) {
      webApp.openLink(RECEIVER_URL, { try_instant_view: true });
    } else {
      window.open(RECEIVER_URL, '_blank', 'noopener,noreferrer');
    }
  };

  return (
    <div className={`sonic-transfer ${isTransmitting ? 'sonic-active' : ''}`}>
      <h2 className="sonic-title">–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞</h2>
      
      <div className="btn-row">
        <button
          onClick={handleSendToken}
          disabled={!tokenId || isTransmitting || !isQuietReady}
          className={`sonic-btn primary ${isTransmitting ? 'active' : ''}`}
        >
          {isTransmitting ? (
            <>
              <span className="spinner"></span>
              –ü–µ—Ä–µ–¥–∞—á–∞...
            </>
          ) : (
            'üì§ –ü–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω'
          )}
        </button>
        
        <button 
          onClick={handleOpenReceiver}
          className="sonic-btn secondary"
        >
          üì• –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
        </button>
      </div>
      
      {isTransmitting && (
        <div className="sonic-eq">
          {Array.from({ length: 8 }).map((_, i) => (
            <div 
              key={i} 
              className={`bar ${i < volumeBars ? 'on' : ''}`}
              style={{ height: `${(i + 1) * 2}px` }}
            />
          ))}
        </div>
      )}
      
      {status && (
        <div className={`sonic-status ${
          status.includes('–û—à–∏–±–∫–∞') ? 'error' : 
          status.includes('–∑–∞–≤–µ—Ä—à–µ–Ω–∞') ? 'success' : ''
        }`}>
          {status}
        </div>
      )}
      
      {isIos && (
        <div className="ios-hint">
          <strong>–î–ª—è iOS:</strong> –£–≤–µ–ª–∏—á—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ –º–∞–∫—Å–∏–º—É–º–∞ –∏ –ø–æ–¥–Ω–µ—Å–∏—Ç–µ 
          —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ 10-20 —Å–º –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É. –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞.
        </div>
      )}
    </div>
  );
}