import React from 'react';
import '../styles/Components/SonicTransfer.css';

type Props = {
  tokenId: string | null;
  amount: number | null;
  onSuccess?: (payload?: any) => void;
};

export function SonicTransfer({ tokenId, amount }: Props) {
  // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ receiver.html (–∫–æ—Ä–µ–Ω—å —Ñ—Ä–æ–Ω—Ç–∞! –º–µ–Ω—è–π –µ—Å–ª–∏ –ø—É—Ç—å –¥—Ä—É–≥–æ–π)
  const RECEIVER_URL = '/receiver.html'; // –∏–ª–∏ '/static/receiver.html', –µ—Å–ª–∏ —É —Ç–µ–±—è Vercel
  const TG_BOT = 'YOUR_BOT'; // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π username –ë–û–¢–ê –±–µ–∑ @

  const openReceiverPage = () => {
    if (!tokenId || !amount) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!');
      return;
    }
    const url =
      `${RECEIVER_URL}?bot=${TG_BOT}` +
      `&token_id=${encodeURIComponent(tokenId)}` +
      `&amount=${encodeURIComponent(amount)}`;
    if (
      window.Telegram &&
      window.Telegram.WebApp &&
      typeof window.Telegram.WebApp.openLink === 'function'
    ) {
      window.Telegram.WebApp.openLink(url, { try_instant_view: true });
    } else {
      window.open(url, '_blank');
    }
  };

  return (
    <div className="sonic-transfer">
      <h2 className="sonic-title">–ü–µ—Ä–µ–¥–∞—á–∞ —á–µ—Ä–µ–∑ –∑–≤—É–∫</h2>
      <div className="btn-row">
        <button
          className="sonic-btn secondary"
          onClick={openReceiverPage}
          disabled={!tokenId || !amount}
        >
          üì• –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω (–æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏—ë–º–∞)
        </button>
      </div>
      <div className="ios-hint">
        –î–ª—è –ø—Ä–∏—ë–º–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.<br />
        –ü–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ Telegram.<br />
        <b>–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ!</b>
      </div>
    </div>
  );
}

export default SonicTransfer;
