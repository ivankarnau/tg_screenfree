import React, { useRef, useState, useEffect } from 'react';
import { useTelegram } from '../hooks/useTelegram';
import '../styles/Components/SonicTransfer.css';

const PROFILE_NAME = 'ultrasonic-transfer';

export function SonicTransfer({ tokenId, amount, onSuccess }: Props) {
  const { webApp, isIos, showPopup } = useTelegram();
  const [isTransmitting, setTransmitting] = useState(false);
  const [status, setStatus] = useState('');
  const [isQuietReady, setIsQuietReady] = useState(false);
  const txRef = useRef<any>();

  useEffect(() => {
    const handleQuietReady = () => setIsQuietReady(true);
    const handleQuietFailed = () => setStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏');

    window.addEventListener('quiet-ready', handleQuietReady);
    window.addEventListener('quiet-failed', handleQuietFailed);

    return () => {
      window.removeEventListener('quiet-ready', handleQuietReady);
      window.removeEventListener('quiet-failed', handleQuietFailed);
    };
  }, []);

  const handleSendToken = async () => {
    if (!tokenId || !amount) {
      showPopup({ title: '–û—à–∏–±–∫–∞', message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏' });
      return;
    }

    if (!isQuietReady) {
      showPopup({ title: '–û—à–∏–±–∫–∞', message: '–ê—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞' });
      return;
    }

    try {
      setTransmitting(true);
      setStatus('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏...');
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (window.AudioContext) {
        const audioContext = new AudioContext();
        if (audioContext.state === 'suspended') {
          await audioContext.resume();
        }
      }

      txRef.current = window.Quiet.transmitter({
        profile: PROFILE_NAME,
        onFinish: () => {
          setStatus('–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          setTransmitting(false);
          onSuccess?.();
          txRef.current?.destroy();
        },
        onCreateFail: (e) => {
          console.error('Transmitter error:', e);
          setStatus(`–û—à–∏–±–∫–∞: ${e.message || e}`);
          setTransmitting(false);
        }
      });

      const payload = JSON.stringify({
        token_id: tokenId,
        amount: amount,
        ts: Date.now()
      });

      // –î–ª—è iOS –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      if (isIos) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      setStatus('–ò–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∞...');
      txRef.current.transmit(window.Quiet.str2ab(payload));
      
    } catch (error) {
      console.error('Transmission failed:', error);
      setStatus('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏');
      setTransmitting(false);
      txRef.current?.destroy();
    }
  };

  const handleOpenReceiver = () => {
    const RECEIVER_URL = '/receiver.html';
    
    if (webApp?.openLink) {
      webApp.openLink(RECEIVER_URL, { try_instant_view: true });
    } else {
      window.open(RECEIVER_URL, '_blank', 'noopener,noreferrer');
    }
  };

  return (
    <div className="sonic-transfer">
      <button
        onClick={handleSendToken}
        disabled={!tokenId || isTransmitting || !isQuietReady}
      >
        {isTransmitting ? '–ü–µ—Ä–µ–¥–∞—á–∞...' : 'üì§ –ü–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω'}
      </button>
      <button onClick={handleOpenReceiver}>üì• –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω</button>
      
      {status && <div className="status">{status}</div>}
      
      {isIos && (
        <div className="ios-hint">
          –ù–∞ iOS —É–≤–µ–ª–∏—á—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏ –ø–æ–¥–Ω–µ—Å–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–ª–∏–∂–µ
        </div>
      )}
    </div>
  );
}